/* tslint:disable */
/* eslint-disable */
/**
 * SIWE Authentication Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  JWTPair,
  SigninData,
} from '../models/index';
import {
    JWTPairFromJSON,
    JWTPairToJSON,
    SigninDataFromJSON,
    SigninDataToJSON,
} from '../models/index';

export interface RefreshPostRequest {
    body: string;
}

export interface SignInPostRequest {
    signinData: SigninData;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Get a nonce for a sign in request.
     */
    async nonceGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nonce`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get a nonce for a sign in request.
     */
    async nonceGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.nonceGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Checks a provided refresh token, returns a new access token and refresh token.
     */
    async refreshPostRaw(requestParameters: RefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWTPair>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling refreshPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTPairFromJSON(jsonValue));
    }

    /**
     * Checks a provided refresh token, returns a new access token and refresh token.
     */
    async refreshPost(requestParameters: RefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWTPair> {
        const response = await this.refreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Signs the user in, creating and returning a JWT.
     */
    async signInPostRaw(requestParameters: SignInPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWTPair>> {
        if (requestParameters['signinData'] == null) {
            throw new runtime.RequiredError(
                'signinData',
                'Required parameter "signinData" was null or undefined when calling signInPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sign_in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SigninDataToJSON(requestParameters['signinData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTPairFromJSON(jsonValue));
    }

    /**
     * Signs the user in, creating and returning a JWT.
     */
    async signInPost(requestParameters: SignInPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWTPair> {
        const response = await this.signInPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates an access token.
     */
    async validateGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/validate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validates an access token.
     */
    async validateGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateGetRaw(initOverrides);
    }

}
